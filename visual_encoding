#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Tue Sep 12 11:20:22 2017

@author: shuchaolu
"""

import cPickle
import itertools, operator
import numpy as np

import matplotlib.pyplot as plt
from sklearn.manifold import TSNE

if __name__ == "__main__":
    #output_path_500 = "result_lstm/results_only/20170823_221101/results500.p"
    #output_path_500 = "./mixed_single_result_old/results_only/20170912_211201/results500.p"
    #output_path_500 = "./glove_single_result_old/results_only/20170911_200202/results506.p"
    #output_path_500 = "./mixed_result_lstm/results_only/20170912_203715/results500.p"
    output_path_500 = "./glove_result_lstm/results_only/20170914_200754/results506.p"
    path_for_freq_500 = output_path_500
    x_for_freq_500 = cPickle.load(open(path_for_freq_500,"rb"))
    
    #_,test_acc,_,cnn_encodings,labels,i2w_lb,lb_freq = x_for_freq_500
    acc_list,test_acc,_, cnn_encodings, labels,_,_,lb_freq,i2w_lb = x_for_freq_500
    
    cnn_encodings_train = cnn_encodings[0]
    cnn_encodings_test = cnn_encodings[1]
    n_cluster = 9   
    lb_freq_all500,lb_freq_train500,lb_freq_test500 = lb_freq
    labels_dense = np.argmax(labels,axis=1)
    
    def get_top_words_in_labels(lb_freq,n_clusters):
        stop_words = ['acute','pain','of','with','leg','unspecified','and','finger','and','mal','in','status','hand','follow','up','accidental']
        vocab_sm = {}
        for label in lb_freq:
            label_words = label.split()
            for word in label_words:
                if word in vocab_sm:
                    vocab_sm[word] += lb_freq[label]
                else:
                    vocab_sm[word] = lb_freq[label]
        vocab_list = [(itm,vocab_sm[itm]) for itm in vocab_sm if not itm in stop_words]
        vocab_list = sorted(vocab_list, key = lambda t:t[1], reverse = True)
        vocab_list = [word for (word,freq) in vocab_list[:n_clusters] if word not in stop_words]
        
        return vocab_list
 
    def get_the_label_encodings(label_encodings,labels,i2w,lb_vocab):
        label_cluster = []
        label_cluster_name = []
        label_words = []
        for i in range(len(labels)):
            label_words.append(i2w[labels_dense[i]])
            label_cluster.append(0)
            label_cluster_name.append('other')
            for j in range(len(lb_vocab)):
                if lb_vocab[j] in i2w[labels_dense[i]]:
                    label_cluster[i] = j + 1
                    label_cluster_name[i] = lb_vocab[j]
        return label_encodings,label_words,label_cluster,label_cluster_name

    
    lb_vocab = get_top_words_in_labels(lb_freq_all500,n_cluster)
    
    
    label_encodings = get_the_label_encodings(cnn_encodings_train,labels_dense,i2w_lb,lb_vocab)
    label_tSNE = TSNE(n_components=2).fit_transform(label_encodings[0])
    label_tSNE = [ label_tSNE[i] for i in range(label_tSNE.shape[0])]
    
    label_encodings_tuples = zip(label_tSNE,label_encodings[1],label_encodings[2],label_encodings[3])
    label_encodings_tuples = sorted(label_encodings_tuples, key = lambda t:t[2])
    
    # plot the t-SNE of the label encodings:
    groups = []
    group = []
    for i in range(len(label_encodings_tuples)):
        if i==0:
            group = [label_encodings_tuples[i]]
        else:
            if label_encodings_tuples[i][2] != label_encodings_tuples[i-1][2]:
                groups.append(group)
                group = [label_encodings_tuples[i]]
            else:
                group.append(label_encodings_tuples[i])
    groups.append(group)
    groups = groups[1:n_cluster+1]
    
    fig0 = plt.figure()
    scats = []
    draw = [True,True,True,True,True,True,True,True,True]
    group_names = ['chest','abd','fever','back','closed','laceration','headache','viral','contusion']
    using_group_names = [name for i,name in enumerate(group_names) if draw[i]]
    
    def draw_tsne(grp):
        tsne,_,_,_ = zip(*grp)
        tsne = list(tsne)
        tsne_x,tsne_y = zip(*tsne)
        #tsne_x,tsne_y,tsne_z = zip(*tsne)
        scat = plt.scatter(list(tsne_x),list(tsne_y),alpha=0.3)#,list(tsne_z))
        
        return scat
    
    for i,grp in enumerate(groups):
        if draw[i]:
            scat = draw_tsne(grp)
            scats.append(scat)
            
            
    plt.legend(scats,using_group_names,bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)

    plt.show()
